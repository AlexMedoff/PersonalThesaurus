/* WordHippo */

const xhr = require('mu.js')
const fs = require('fs')
const cache = require('./cache')(__dirname + '/cache')

var WordHippo = {}

WordHippo.host = `https://www.wordhippo.com`

/**
 * Initialize function, not sure if needed anymore. 
 */
WordHippo.init = () => {
    xhr(WordHippo.host).then($ => {
        cache.save(host, $.html())
        const fromlang = []
        $('option', $('select[name="fromlang"]')).each(function() {
            const option = $(this)
            fromlang.push([option.text(), option.val()])
        })

        const tolang = []
        $('option', $('select[name="tolang"]')).each(function() {
            const option = $(this)
            tolang.push([option.text(), option.val()])
        })

        const actions = []
        $('option', $('select[name="action"]')).each(function() {
            const option = $(this)
            actions.push([option.text(), option.val()])
        })

        fs.writeFileSync('fromlang.json', JSON.stringify(fromlang, false, 3))
        fs.writeFileSync('tolang.json', JSON.stringify(tolang, false, 3))
        fs.writeFileSync('actions.json', JSON.stringify(actions, false, 3))
    })
}

/**
 * Resolver functions for easy resolving. :P
 */
WordHippo.resolve = { /* */ }

WordHippo.resolve.synonym = word => `${WordHippo.host}/what-is/another-word-for/${word}.html`
WordHippo.resolve.antonym = word => `${WordHippo.host}/what-is/the-opposite-of/${word}.html`
WordHippo.resolve.sentences = word => `${WordHippo.host}/what-is/sentences-with-the-word/${word}.html`
WordHippo.resolve.rhyme = word => `${WordHippo.host}/what-is/words-that-rhyme-with/${word}.html`

/* following three don't add any real extra value at this point, implement them if you feel like it and push them to GitHub if you want. */

// WordHippo.resolve.adjective = word => `${WordHippo.host}/what-is/the-adjective-for/${word}.html`
// WordHippo.resolve.adverb = word => `${WordHippo.host}/what-is/the-adverb-for/${word}.html`
// WordHippo.resolve.noun = word => `${WordHippo.host}/what-is/the-noun-for/${word}.html`

/**
 * Collect definition of a given word.
 * @param {string} word 
 * @returns {Promise<String>} string with single definition
 */
WordHippo.definition = word => new Promise((done, fail) => {
    xhr(WordHippo.resolve.synonym(word)).then($ => {
        const wordtype = $('.wordtype').get(0)
        const tabdesc = $('.tabdesc').after(wordtype).get(0)
        const definition = $(tabdesc).text().trim()
        done(definition)
    }).catch(fail)
})

/**
 * Collect words related to a given word.
 * @param {string} word 
 * @returns {Promise<Array>} array of 1 or more strings
 */
WordHippo.related = word => new Promise((done, fail) => {
    xhr(WordHippo.resolve.synonym(word)).then($ => {
        const relatedWords = []
        const wordtype = $('.wordtype').get(0)

        const related = $('.relatedwords').after(wordtype).get(0)

        $('a', $(related)).each(function() {
            const a = $(this)
            relatedWords.push(a.text().trim())
        })

        done(relatedWords)
    }).catch(fail)
})

/**
 * Collect opposites of a given word.
 * @param {string} word
 * @returns {Promise<Array>} array of 1 or more strings
 */
WordHippo.opposites = word => new Promise((done, fail) => {
    xhr(WordHippo.resolve.antonym(word)).then($ => {
        const oppositeWords = []
        const wordtype = $('.wordtype').get(0)

        const opposite = $('.relatedwords').after(wordtype).get(0)

        $('a', $(opposite)).each(function() {
            const a = $(this)
            oppositeWords.push(a.text().trim())
        })

        done(oppositeWords)
    }).catch(fail)
})

/**
 * Collect sentences with a given word.
 * @param {string} word 
 * @returns {Promise<Array>} array of 1 or more strings
 */
WordHippo.sentences = word => new Promise((done, fail) => {
    xhr(WordHippo.resolve.sentences(word)).then($ => {
        const sentenceTable = $('#mainsentencestable')
        const sentences = []
        $('tr', sentenceTable).each(function() {
            const tr = $(this)
            sentences.push(tr.text().trim())
        })
        done(sentences)
    }).catch(fail)
})

/**
 * Collect words that rhyme with a given word.
 * @param {string} word rhymes with
 * @returns {Promise<Array>} array of 1 or more strings
 */
WordHippo.rhymes = word => new Promise((done, fail) => {
    xhr(WordHippo.resolve.rhyme(word)).then($ => {
        const wordtype = $('.wordtype').get(0)
        const wordblock = $('.relatedwords').after(wordtype).get(0)
        const rhymes = []

        $('a', wordblock).each(function() {
            const a = $(this)
            rhymes.push(a.text().trim())
        })

        done(rhymes)
    }).catch(fail)
})

WordHippo.adverb = word => new Promise((done, fail) => {
    /* todo: later if bored or by someone else */
})

WordHippo.noun = word => new Promise((done, fail) => {
    /* todo: later if bored or by someone else */
})

/** Collect all available data about word a given word (definition/related/opposites/sentences/rhymes) 
 * @param {string} word the word to query
 * @param {boolean} nocache do not use cache but fetch again
 * @returns {Promise<Object>} 
 */
WordHippo.getWord = (word, nocache = false) => new Promise(async(done, fail) => {
    if (cache.exists(word) && !nocache) {
        return done(cache.load(word))
    }
    const definition = await WordHippo.definition(word)
    const related = await WordHippo.related(word)
    const opposites = await WordHippo.opposites(word)
    const sentences = await WordHippo.sentences(word)
    const rhymes = await WordHippo.rhymes(word)

    cache.save(word, { word, definition, related, opposites, sentences })
    done(cache.load(word))
})

module.exports = WordHippo